#!/usr/bin/env bash

## wl-rofi-screenshot
## Author: ceuk, rynskyi
## Licence: WTFPL
## Usage:
##    show the menu with wl-rofi-screenshot
##    stop recording with wl-rofi-screenshot -s

# Screenshot directory
screenshot_directory="${ROFI_SCREENSHOT_DIR:-${XDG_PICTURES_DIR:-$HOME/Pictures}/Screenshots}"

# Default date format
default_date_format="${ROFI_SCREENSHOT_DATE_FORMAT:-"+%d-%m-%Y %H:%M:%S"}"


delay() {
  sleep 0.5
}

notify() {
  local message="$1"    # Notification message text
  local timeout="$2"    # Optional timeout value in milliseconds
  local replace="$3"    # Optional flag to replace the previous notification

  # Build the base argument array with the -p flag so notify-send returns an ID
  local args=(--app-name="screenshot" -p)

  # If a timeout is provided, add the -t option with the timeout value
  [ -n "$timeout" ] && args+=(-t "$timeout")

  # If the replace flag is set and we have a stored notification ID, add the -r option to replace it
  if [ -n "$replace" ] && [ -n "$last_notify_id" ]; then
    args+=(-r "$last_notify_id")
  fi

  # Directly assign the returned notification ID to the global variable
  last_notify_id=$(notify-send "${args[@]}" "Screenshot" "$message")
}

countdown() {
  notify "Recording in 3" 1000
  sleep 1
  notify "Recording in 2" 1000 true
  sleep 1
  notify "Recording in 1" 1000 true
  sleep 1
}

crtc() {
  notify "Select a region to capture"
  grim -g "$(slurp)" -t png /tmp/screenshot_clip.png
  wl-copy < /tmp/screenshot_clip.png
  rm /tmp/screenshot_clip.png
  notify "Region copied to Clipboard"
}

crtf() {
  notify "Select a region to capture"
  dt="$1"
  grim -g "$(slurp)" -t png "$screenshot_directory/$dt.png"
  notify "Region saved to ${screenshot_directory//${HOME}/~}/$dt.png"
}

cstc() {
  delay
  grim -t png /tmp/screenshot_clip.png
  wl-copy < /tmp/screenshot_clip.png
  rm /tmp/screenshot_clip.png
  notify "Screenshot copied to Clipboard"
}

cstf() {
  delay
  dt="$1"
  grim -t png "$screenshot_directory/$dt.png"
  notify "Saved to ${screenshot_directory//${HOME}/~}/$dt.png"
}

rgrtf() {
  notify "Select a region to record"
  dt="$1"
  wf-recorder -g "$(slurp && countdown)" -c gif -f "$screenshot_directory/$dt.gif"
  notify "Saved to ${screenshot_directory//${HOME}/~}/$dt.gif"
}

rgstf() {
  countdown
  dt="$1"
  wf-recorder -c gif -f "$screenshot_directory/$dt.gif"
  notify "Saved to ${screenshot_directory//${HOME}/~}/$dt.gif"
}

rvrtf() {
  notify "Select a region to record"
  dt="$1"
  wf-recorder -g "$(slurp && countdown)" -f "$screenshot_directory/$dt.mp4"
  notify "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

rvstf() {
  countdown
  dt="$1"
  wf-recorder -f "$screenshot_directory/$dt.mp4"
  notify "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

stop_recording() {
  if [ -z "$(pgrep -x wf-recorder)" ]; then
    notify "No recording found"
    exit 1
  fi
  pkill -SIGINT -x wf-recorder
  notify "Recording stopped"
}


get_options() {
  echo "  Region  Clip"
  echo "  Region  File"
  # echo "  Window  Clip"
  # echo "  Window  File"
  echo "  Screen  Clip"
  echo "  Screen  File"
  echo "  Region  File (GIF)"
  echo "  Screen  File (GIF)"
  echo "  Region  File (MP4)"
  echo "  Screen  File (MP4)"
  echo "  Stop recording"
}

check_deps() {
  if ! hash "$1" 2> /dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

show_help() {
  echo ### wl-rofi-screenshot
  echo "USAGE: wl-rofi-screenshot [OPTION] <argument>"
  echo "(no option)"
  echo "    show the screenshot menu"
  echo "-s, --stop"
  echo "    stop recording"
  echo "-h, --help"
  echo "    this screen"
  echo "-d, --directory <directory>"
  echo "    set the screenshot directory"
  echo "-t, --timestamp <format>"
  echo "    set the format used for timestamps, in the format the date"
  echo "    command expects (default '+%d-%m-%Y %H:%M:%S')"
}

check_directory() {
  if [[ ! -d $1 ]]; then
    echo "Directory does not exist!"
    exit 1
  fi
}

main() {

  # Check dependencies
  for dep in slurp grim wf-recorder wl-copy rofi; do
    check_deps "$dep"
  done


  # Rebind long options to short ones
  for arg in "$@"; do
    shift
    case "$arg" in
      '--help') set -- "$@" '-h' ;;
      '--directory') set -- "$@" '-d' ;;
      '--timestamp') set -- "$@" '-t' ;;
      '--stop') set -- "$@" '-s' ;;
      *) set -- "$@" "$arg" ;;
    esac
  done

  # parse short options
  OPTIND=1
  date_format="$default_date_format"
  while getopts "hd:t:s" opt; do
    case "$opt" in
      'h')
        show_help
        exit 0
        ;;
      'd')
        check_directory $OPTARG
        screenshot_directory="$OPTARG"
        ;;
      't')
        date_format="$OPTARG"
        ;;
      's')
        stop_recording
        exit 0
        ;;
      '?')
        show_help
        exit 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  # Get choice from rofi
  choice=$( (get_options) | rofi -dmenu -i -fuzzy -p "Screenshot")

  # If user has not picked anything, exit
  if [[ -z "${choice// /}" ]]; then
    exit 1
  fi

  dt=$(date "$date_format")

  # run the selected command
  case $choice in
    '  Region  Clip')
      crtc
      ;;
    '  Region  File')
      crtf "$dt"
      ;;
    '  Window  Clip')
      cwtc
      ;;
    '  Window  File')
      cwtf "$dt"
      ;;
    '  Screen  Clip')
      cstc
      ;;
    '  Screen  File')
      cstf "$dt"
      ;;
    '  Region  File (GIF)')
      rgrtf "$dt"
      ;;
    '  Screen  File (GIF)')
      rgstf "$dt"
      ;;
    '  Region  File (MP4)')
      rvrtf "$dt"
      ;;
    '  Screen  File (MP4)')
      rvstf "$dt"
      ;;
    '  Stop recording')
      stop_recording
      ;;
  esac

  # done
  set -e
}

main "$@" &

exit 0
